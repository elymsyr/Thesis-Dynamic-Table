/*! js-cookie v3.0.1 | MIT */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self,function(){var n=e.Cookies,o=e.Cookies=t();o.noConflict=function(){return e.Cookies=n,o}}())}(this,(function(){"use strict";function e(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)e[o]=n[o]}return e}return function t(n,o){function r(t,r,i){if("undefined"!=typeof document){"number"==typeof(i=e({},o,i)).expires&&(i.expires=new Date(Date.now()+864e5*i.expires)),i.expires&&(i.expires=i.expires.toUTCString()),t=encodeURIComponent(t).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var c="";for(var u in i)i[u]&&(c+="; "+u,!0!==i[u]&&(c+="="+i[u].split(";")[0]));return document.cookie=t+"="+n.write(r,t)+c}}return Object.create({set:r,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var t=document.cookie?document.cookie.split("; "):[],o={},r=0;r<t.length;r++){var i=t[r].split("="),c=i.slice(1).join("=");try{var u=decodeURIComponent(i[0]);if(o[u]=n.read(c,u),e===u)break}catch(e){}}return e?o[e]:o}},remove:function(t,n){r(t,"",e({},n,{expires:-1}))},withAttributes:function(n){return t(this.converter,e({},this.attributes,n))},withConverter:function(n){return t(e({},this.converter,n),this.attributes)}},{attributes:{value:Object.freeze(o)},converter:{value:Object.freeze(n)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"})}));
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(function ($, Drupal, cookies) {
  var deprecatedMessageSuffix = "is deprecated in Drupal 9.0.0 and will be removed in Drupal 10.0.0. Use the core/js-cookie library instead. See https://www.drupal.org/node/3104677";

  var isFunction = function isFunction(obj) {
    return Object.prototype.toString.call(obj) === '[object Function]';
  };

  var parseCookieValue = function parseCookieValue(value, parseJson) {
    if (value.indexOf('"') === 0) {
      value = value.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
    }

    try {
      value = decodeURIComponent(value.replace(/\+/g, ' '));
      return parseJson ? JSON.parse(value) : value;
    } catch (e) {}
  };

  var reader = function reader(cookieValue, cookieName, converter, readUnsanitized, parseJson) {
    var value = readUnsanitized ? cookieValue : parseCookieValue(cookieValue, parseJson);

    if (converter !== undefined && isFunction(converter)) {
      return converter(value, cookieName);
    }

    return value;
  };

  $.cookie = function (key) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
    Drupal.deprecationError({
      message: "jQuery.cookie() ".concat(deprecatedMessageSuffix)
    });

    if (value !== undefined && !isFunction(value)) {
      var attributes = _objectSpread(_objectSpread({}, $.cookie.defaults), options);

      if (typeof attributes.expires === 'string' && attributes.expires !== '') {
        attributes.expires = new Date(attributes.expires);
      }

      var cookieSetter = cookies.withConverter({
        write: function write(cookieValue) {
          return encodeURIComponent(cookieValue);
        }
      });
      value = $.cookie.json && !$.cookie.raw ? JSON.stringify(value) : String(value);
      return cookieSetter.set(key, value, attributes);
    }

    var userProvidedConverter = value;
    var cookiesShim = cookies.withConverter({
      read: function read(cookieValue, cookieName) {
        return reader(cookieValue, cookieName, userProvidedConverter, $.cookie.raw, $.cookie.json);
      }
    });

    if (key !== undefined) {
      return cookiesShim.get(key);
    }

    var results = cookiesShim.get();
    Object.keys(results).forEach(function (resultKey) {
      if (results[resultKey] === undefined) {
        delete results[resultKey];
      }
    });
    return results;
  };

  $.cookie.defaults = _objectSpread({
    path: ''
  }, cookies.defaults);
  $.cookie.json = false;
  $.cookie.raw = false;

  $.removeCookie = function (key, options) {
    Drupal.deprecationError({
      message: "jQuery.removeCookie() ".concat(deprecatedMessageSuffix)
    });
    cookies.remove(key, _objectSpread(_objectSpread({}, $.cookie.defaults), options));
    return !cookies.get(key);
  };
})(jQuery, Drupal, window.Cookies);;
(function ($, Drupal, window) {
  'use strict';

  // Categories and the values when enabled in the OneTrust cookie.
  var cookieCategories = {
    targetingCategory: 'C0004:1',
    functionalCategory: 'C0003:1'
  };

  // Load the scripts which are unset in the library_info_alter.
  function adjustElements(LocationEurope, cookieData) {
    var isLocationEurope = LocationEurope || false;
    var cookieDataSorted = cookieData || {};

    window.blockStatus = false;
    window.blockCategory = [];

    // Cookie not set. Default behavior.
    if (!cookieDataSorted.groups) {
      // Check the DoNotTrack setting.
      if (navigator.doNotTrack !== 'undefined' && navigator.doNotTrack === "1") {
        window.blockStatus = true;
        window.blockCategory.push('targetingCategory');
      }
      // Modify elements and don't load scripts.
      if (isLocationEurope) {
        $.each(cookieCategories, function (category, id) {
          window.blockStatus = true;
          if (window.blockCategory.indexOf(category) === -1) {
            window.blockCategory.push(category);
          }
        });
      }
    } else {
      // Consent cookie is set.
      // Modify elements depending on consent cookie value.
      $.each(cookieCategories, function (category, id) {
        if (!cookieDataSorted.groups.match(id)) {
          window.blockStatus = true;
          window.blockCategory.push(category);
        }
      });
    }
  }

  // Function run when OneTrust geolocation kicks in.
  window.geofeed = function (options) {
    var cookieDataSorted = window.consentCookie();
    var bypassOneTrust = $.cookie('bypassOneTrust') || false;
    var dataLayer = window.dataLayer || [];

    // This function is called twice, avoid error when continent is not defined.
    if (Object.prototype.hasOwnProperty.call(options, 'continent')) {
      if (!bypassOneTrust) {
        adjustElements(options.continent.toString() === 'EU', cookieDataSorted);
      } else {
        dataLayer.push({
          bypassOneTrust: bypassOneTrust
        });
      }
    }
  };

  window.consentCookie = function () {
    // Get the consent data from cookie set by OneTrust.
    var optanonConsent = $.cookie('OptanonConsent');
    var cookieDataSorted = {};

    if (optanonConsent) {
      // Split the string to get groups value.
      $.each(optanonConsent.split('&'), function (index, property) {
        var data = property.split('=');

        // Some properties might be empty.
        if (data[1]) {
          cookieDataSorted[data[0]] = data[1];
        } else {
          cookieDataSorted[data[0]] = '';
        }
      });
    }

    return cookieDataSorted;
  };

  // Reload page when user interacts with the preference center.
  $(window).on('load', function () {
    // Handle click on cookie settings button when videos are blocked.
    var body = $('body');

    body.on('click', '.blocked-video__button, .fancy-video.targeting, .vidyard.targeting', function (e) {
      // Prevent page refresh and propagation.
      e.preventDefault();
      e.stopPropagation();
      // Open the OneTrust Preference Center modal.
      OneTrust.ToggleInfoDisplay();

      // Focus the PC menu item depending on category.
      if ($(this).hasClass('targeting')) {
        // Tracking Cookies.
        $('#onetrust-pc-sdk [aria-controls=ot-desc-id-C0004].category-menu-switch-handler, #onetrust-pc-sdk [aria-controls=ot-desc-id-BG5].category-menu-switch-handler').click();
      }
      else {
        // Functional Cookies.
        $('#onetrust-pc-sdk [aria-controls=ot-desc-id-C0003].category-menu-switch-handler').click();
      }
    });
  });
  // Remove the old cookie banner wrapper conditionally by domain.
  Drupal.behaviors.removeOldCookieBanner = {
    attach: function (context) {
      $('.cookies-dialog', context).remove();
    }
  };
}(jQuery, Drupal, window));
;
